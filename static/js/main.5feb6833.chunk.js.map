{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","ALL","filterReducer","todos","playload","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectTodo","className","map","id","completed","classNames","title","onClick","currentTodoActions","handleTodoInfo","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","selectedTodo","useEffect","fetchUser","a","userId","loadedUser","Error","email","name","href","App","isError","setIsError","fetchTodos","loadedTodos","actionTodos","visibleTodos","useMemo","todoList","normalizedQuery","toLowerCase","trim","includes","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5feb6833.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype Action = SetStatusAction | SetQueryAction;\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState = { query: '', status: Status.ALL };\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  playload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  playload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.playload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useAppDispatch();\n  const selectTodo = useAppSelector((state) => state.currentTodo);\n\n  const handleTodoInfo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleTodoInfo(todo)}\n              >\n                <span className=\"icon\">\n                  {selectTodo && selectTodo.id === todo.id\n                    ? <i className=\"far fa-eye-slash\" />\n                    : <i className=\"far fa-eye\" />}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { Status } from '../../types/Status';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const { status, query } = useAppSelector((state) => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleClearSerch = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleChangeStatus}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"delete\"\n              onClick={handleClearSerch}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        if (selectedTodo) {\n          const loadedUser = await getUser(selectedTodo.userId);\n\n          setUser(loadedUser);\n        }\n      } catch (error) {\n        throw new Error('User not found');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUser();\n  }, [selectedTodo]);\n\n  const { id, title, completed } = selectedTodo || {};\n  const { email, name } = user || {};\n\n  const handleCloseModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"delete\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done </strong>\n                : <strong className=\"has-text-danger\">Planned </strong>}\n              <a href={`mailto:${email}`}>\n                {`by ${name}`}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as actionTodos } from './features/todos';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const todos = useAppSelector((state) => state.todos);\n  const selectTodo = useAppSelector((state) => state.currentTodo);\n  const { status, query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const loadedTodos = await getTodos();\n\n        dispatch(actionTodos.setTodos(loadedTodos));\n      } catch (error) {\n        setIsError(true);\n        throw new Error('Error fetching todos');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    let todoList = [...todos];\n\n    todoList = todoList.filter(todo => {\n      switch (status) {\n        case Status.ACTIVE:\n          return !todo.completed;\n        case Status.COMPLETED:\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n    if (query) {\n      const normalizedQuery = query.toLowerCase().trim();\n\n      return todoList.filter((todo) => todo.title.includes(normalizedQuery));\n    }\n\n    return todoList;\n  }, [todos, status, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            {isLoading && <Loader />}\n\n            {isError && (\n              <p className=\"notification is-warning\">\n                Error fetching todos\n              </p>\n            )}\n\n            {!visibleTodos.length && query && (\n              <p className=\"notification is-warning\">\n                There are no todos matching current filter criteria\n              </p>\n            )}\n\n            {visibleTodos.length > 0 && (\n              <div className=\"block\">\n                <TodoList\n                  todos={visibleTodos}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      {selectTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}